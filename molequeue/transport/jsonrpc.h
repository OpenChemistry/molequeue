/******************************************************************************

  This source file is part of the MoleQueue project.

  Copyright 2012 Kitware, Inc.

  This source code is released under the New BSD License, (the "License").

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

******************************************************************************/

#ifndef JSONRPC_H
#define JSONRPC_H

#include <molequeue/molequeueglobal.h>
#include <molequeue/transport/message.h>
#include <json/json-forwards.h>

#include <QtCore/QObject>
#include <QtCore/QVariantHash>

#include "mqconnectionexport.h"

class QDir;
class QVariant;

namespace MoleQueue
{
class Connection;

/**
 * @class JsonRpc jsonrpc.h <molequeue/jsonrpc.h>
 * @brief Generate and interpret JSON-RPC packets.
 * @author David C. Lonie
 *
 * This class is used to generate and interpret JSON-RPC packets. It provides
 * methods for detecting packet types, basic error handling, and JSON-RPC object
 * generation. It must be subclassed and extended to handle application
 * specific requests (see the ClientJsonRpc and ServerJsonRpc classes for
 * examples).
 *
 * All JSON-RPC messages should be generated by this class. The convenience
 * functions
 *
 * - generateEmptyRequest
 * - generateEmptyResponse
 * - generateEmptyError
 * - generateEmptyNotification
 * - generateErrorResponse
 *
 * can be used to create preformed JsonCpp objects with a given packet id.
 * Methods of this class used to create application specific requests should
 * call registerRequest with the packet id and request's method identifier. This
 * is used to register the packet id in a lookup table so that the reply to the
 * request can be properly identified.
 *
 * Method identifiers are non-negative integers which uniquely identify the
 * methods known to the application. The pure virtual mapMethodNameToInt
 * function is used internally convert method names to the approporiate
 * identifier.
 *
 * The interpretIncomingPacket and interpretIncomingJsonRpc functions are used
 * to identify and handle received JSON-RPC messages. If the object is a batch
 * request, the requests will be split apart and handled individually. These
 * functions parse the messages, and if an error is encountered an appropriate
 * signal is emitted. The message form (request, result, error, or notification)
 * is detected and validated, and the method is determined using either the
 * mapMethodNameToInt virtual method or the packet id/method id lookup table.
 * The pure virtual function handlePacket is then called with the form,
 * method, contents, and connection details of the packet.
 *
 * handlePacket should interpret the contents of the message based on the
 * indicated method and form and emit an appropriate signal. For instance, the
 * MoleQueue ServerJsonRpc handlePacket implementation responds to a
 * REQUEST_PACKET with the LOOKUP_JOB method by extracting the requested job's
 * id number from the JsonCpp object and emitting the lookupJobRequestReceived
 * signal with the id number as an argument. The Server AbstractRpcInterface
 * subclass handles the signal by locating the requested job information and
 * calling ServerJsonRpc::generateLookupJobResponse, which creates the response
 * packet. Finally, the AbstractRpcInterface subclass sends the response or
 * error packet back to the client.
 */
class MQCONNECTION_EXPORT JsonRpc : public QObject
{
  Q_OBJECT
public:
  /**
    * Constructor.
    *
    * @param parentObject The parent of this instance.
    */
  explicit JsonRpc(QObject *parentObject = 0);

  /**
    * Destructor.
    */
  ~JsonRpc();

  /**
    * Generate a JSON-RPC response packet to notify of an error.
    *
    * @param errorCode Error code
    * @param message Single sentence describing the error that occurred.
    * @param packetId The JSON-RPC id for the packet.
    * @return A PacketType, ready to send to a Connection.
    */
  PacketType generateErrorResponse(int errorCode,
                                   const QString &message,
                                   IdType packetId);

  /**
    * Generate a JSON-RPC response packet to notify of an error.
    *
    * @param errorCode Error code
    * @param message Single sentence describing the error that occurred.
    * @param data a Json::Value to be used as the error object's data member
    * @param packetId The JSON-RPC id for the packet.
    * @return A PacketType, ready to send to a Connection.
    * @overload
    */
  PacketType generateErrorResponse(int errorCode,
                                   const QString &message,
                                   const Json::Value &data,
                                   IdType packetId);

  /**
    * Generate a JSON-RPC response packet to notify of an error.
    *
    * @param errorCode Error code
    * @param message Single sentence describing the error that occurred.
    * @param packetId The JSON-RPC id for the packet.
    * @return A PacketType, ready to send to a Connection.
    * @overload
    */
  PacketType generateErrorResponse(int errorCode,
                                   const QString &message,
                                   const Json::Value &packetId);

  /**
    * Generate a JSON-RPC response packet to notify of an error.
    *
    * @param errorCode Error code
    * @param message Single sentence describing the error that occurred.
    * @param data a Json::Value to be used as the error object's data member
    * @param packetId The JSON-RPC id for the packet.
    * @return A PacketType, ready to send to a Connection.
    * @overload
    */
  PacketType generateErrorResponse(int errorCode,
                                   const QString &message,
                                   const Json::Value &data,
                                   const Json::Value &packetId);

  /**
    * Read a newly received packet.
    * The packet(s) are split and interpreted, and signals are emitted
    * depending on the type of packets.
    *
    * @param connection The connection the RPC was recieved on
    * @param msg A packet containing a single or batch JSON-RPC transmission.
    * @return A QVector containing the packetIds of the data.
    */
  void interpretIncomingPacket(Connection *connection,
                               const Message msg);

  /**
    * Process a JSON-RPC packet and return a QVector containing the packetId(s).
    * The packet(s) are split and interpreted, and signals are emitted
    * depending on the type of packets.
    *
    * @param connection The connection the RPC was received on
    * @param replyTo The reply to endpoint to identify the client.
    * @param data A JsonCpp value containing a single or batch JSON-RPC
    * transmission.
    * @return A QVector containing the packetIds of the data.
    */
  void interpretIncomingJsonRpc(Connection *connection,
                                EndpointId replyTo,
                                const Json::Value &data);

  /**
    * @param strict If false, minor errors (e.g. extra keys) will result in a
    * warning, but will not cause the function to return false.
    * @return True if the input JSON snippet is a valid JSON-RPC 2.0 request.
    */
  bool validateRequest(const PacketType &, bool strict = false);

  /**
    * @param strict If false, minor errors (e.g. extra keys) will result in a
    * warning, but will not cause the function to return false.
    * @return True if the input JSON object is a valid JSON-RPC 2.0 request.
    */
  bool validateRequest(const Json::Value &, bool strict = false);

  /**
    * @param strict If false, minor errors (e.g. extra keys) will result in a
    * warning, but will not cause the function to return false.
    * @return True if the input JSON snippet is a valid JSON-RPC 2.0 response.
    */
  bool validateResponse(const PacketType &, bool strict = false);

  /**
    * @param strict If false, minor errors (e.g. extra keys) will result in a
    * warning, but will not cause the function to return false.
    * @return True if the input JSON object is a valid JSON-RPC 2.0 response.
    */
  bool validateResponse(const Json::Value &, bool strict = false);

  /**
    * @param strict If false, minor errors (e.g. extra keys) will result in a
    * warning, but will not cause the function to return false.
    * @return True if the input JSON snippet is a valid JSON-RPC 2.0
    * notification.
    */
  bool validateNotification(const PacketType &, bool strict = false);

  /**
    * @param strict If false, minor errors (e.g. extra keys) will result in a
    * warning, but will not cause the function to return false.
    * @return True if the input JSON object is a valid JSON-RPC 2.0
    * notification.
    */
  bool validateNotification(const Json::Value &, bool strict = false);

signals:

  /**
    * Emitted when a packet containing invalid JSON is received. The connected
    * client or server must send an error -32700 "Parse error".
    *
    * @param connection The connection the invalid packet was received on
    * @param replyTo The reply to endpoint to identify the client.
    * @param packetId JSON value representing the packetId
    * @param errorDataObject JSON object to be used as the data value in the
    * error object.
    */
  void invalidPacketReceived(MoleQueue::Connection *connection,
                             const MoleQueue::EndpointId replyTo,
                             const Json::Value &packetId,
                             const Json::Value &errorDataObject) const;

  /**
    * Emitted when an invalid JSON-RPC request is received. The connected
    * client or server must send an error -32600 "Invalid request".
    *
    * @param connection The connection the invalid request was received on
    * @param replyTo The reply to endpoint to identify the client.
    * @param packetId JSON value representing the packetId
    * @param errorDataObject JSON object to be used as the data value in the
    * error object.
    */
  void invalidRequestReceived(MoleQueue::Connection *connection,
                              const MoleQueue::EndpointId replyTo,
                              const Json::Value &packetId,
                              const Json::Value &errorDataObject) const;

  /**
    * Emitted when a valid JSON-RPC request with an unknown method is received.
    * The connected client or server must send an error -32601
    * "Method not found".
    *
    * @param connection The connection the unrecognized request was received on
    * @param replyTo The reply to endpoint to identify the client.
    * @param packetId JSON value representing the packetId
    * @param errorDataObject JSON object to be used as the data value in the
    * error object.
    */
  void unrecognizedRequestReceived(MoleQueue::Connection *connection,
                                   const MoleQueue::EndpointId replyTo,
                                   const Json::Value &packetId,
                                   const Json::Value &errorDataObject) const;

  /**
    * Emitted when a valid JSON-RPC request with a known method and invalid
    * parameters is received. The connected client or server must send an
    * error -32602 "Invalid params".
    *
    * @param connection The connection the request was received on
    * @param replyTo The reply to endpoint to identify the client.
    * @param packetId JSON value representing the packetId
    * @param errorDataObject JSON object to be used as the data value in the
    * error object.
    */
  void invalidRequestParamsReceived(MoleQueue::Connection *connection,
                                    const MoleQueue::EndpointId replyTo,
                                    const Json::Value &packetId,
                                    const Json::Value &errorDataObject) const;

  /**
    * Emitted when an internal JSON-RPC error occurs. The connected client or
    * server must send an error -32603 "Internal error".
    *
    * @param connection The connection TODO DOCUMENT
    * @param replyTo The reply to endpoint to identify the client.
    * @param packetId JSON value representing the packetId
    * @param errorDataObject JSON object to be used as the data value in the
    * error object.
    */
  void internalErrorOccurred(MoleQueue::Connection *connection,
                             const MoleQueue::EndpointId replyTo,
                             const Json::Value &packetId,
                             const Json::Value &errorDataObject) const;

protected:
  /// Create and return a new JsonCpp JSON-RPC request.
  /// @param id JSON-RPC id
  static Json::Value generateEmptyRequest(IdType id);
  /// Create and return a new JsonCpp JSON-RPC response.
  /// @param id JSON-RPC id
  static Json::Value generateEmptyResponse(IdType id);
  /// Create and return a new JsonCpp JSON-RPC error response.
  /// @param id JSON-RPC id
  static Json::Value generateEmptyError(IdType id);
  /// Create and return a new JsonCpp JSON-RPC error response.
  /// @param id JSON-RPC id
  static Json::Value generateEmptyError(const Json::Value &id);
  /// Create and return a new JsonCpp JSON-RPC notification.
  /// @param id JSON-RPC id
  static Json::Value generateEmptyNotification();

  /// Enum describing the types of packets that the implementation is aware of.
  enum PacketForm {
    INVALID_PACKET = -1,
    REQUEST_PACKET,
    RESULT_PACKET,
    ERROR_PACKET,
    NOTIFICATION_PACKET
  };

  /// Enum describing the invalid/erronous methods to be handled by this class.
  /// All members must be negative
  enum InvalidMethod {
    /// Packet is a response to a request originating from a different client.
    IGNORE_METHOD = -1,
    /// Method is not known
    UNRECOGNIZED_METHOD = -2,
    /// Method member is not valid (e.g. not a string)
    INVALID_METHOD = -3
  };

  /// @param root Input JSOC-RPC packet
  /// @return The PacketType of the packet
  PacketForm guessPacketForm(const Json::Value &root) const;

  /// @param root Input JSOC-RPC packet
  /// @return The PacketMethod of a request/notification
  int guessPacketMethod(const Json::Value &root) const;

  /**
   * @brief mapMethodNameToInt Convert \a methodName into a subclass specific
   * integral identifier.
   *
   * Reimplement this method in subclasses to convert incoming method strings
   * into an integer. If the method is known, return an integer >= 0 which
   * uniquely identifies the method. If the method string is not recognized,
   * return JsonRpc::UNRECOGNIZED_METHOD.
   *
   * @param methodName Method member of incoming packet.
   * @return Unique non-negative integer identifying the method.
   */
  virtual int mapMethodNameToInt(const QString &methodName) const = 0;

  /**
   * @brief handlePacket Handle a well-formed incoming packet.
   *
   * Implement this method in derived classes to handle incoming messages. The
   * \a msg will be of type \a type (i.e. request, result, error, notification),
   * and the method will correspond to a return value from mapMethodNameToInt(),
   * e.g. a non-negative integer that uniquely represents a known method.
   *
   * @param method Non-negative integer representing a known method. Guaranteed
   * to be a return value from mapMethodNameToInt.
   * @param conn Originating connection
   */
  virtual void handlePacket(int method, PacketForm type,
                            MoleQueue::Connection *conn,
                            const EndpointId replyTo,
                            const Json::Value &root) = 0;

  /// Extract data and emit signal for unparsable JSON.
  /// @param root Invalid request data
  void handleUnparsablePacket(MoleQueue::Connection *connection,
                              const Message msg) const;

  /// Extract data and emit signal for a invalid request.
  /// @param root Invalid request data
  void handleInvalidRequest(MoleQueue::Connection *connection,
                            const EndpointId replyTo,
                            const Json::Value &root) const;

  /// Extract data and emit signal for a unrecognized request method.
  /// @param root Invalid request data
  void handleUnrecognizedRequest(MoleQueue::Connection *connection,
                                 const EndpointId replyTo,
                                 const Json::Value &root) const;

  /**
    * Record that a new request has been sent. This is necessary to identify the
    * matching reply. Register the request prior to sending it. This must be
    * done by subclasses when a request is generated.
    *
    * @param packetId JSON-RPC 'id' value
    * @param method Non-negative integer unique to request method. Must be
    * consistent with the mapMethodNameToInt method.
    */
  void registerRequest(IdType packetId, int method);

  /**
    * Register that a reply has been received. This removes the request from the
    * container of pending requests. This is handled automatically by the
    * JsonRpc::interpret* functions, and should not need to be called by derived
    * classes.
    *
    * @param packetId JSON-RPC 'id' value
    */
  void registerReply(IdType packetId);

  /// Lookup hash for pending requests. Maps packet id to method identifier.
  QHash<IdType, int> m_pendingRequests;
};

} // end namespace MoleQueue

#endif // JSONRPC_H
